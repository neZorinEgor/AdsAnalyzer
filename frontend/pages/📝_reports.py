import streamlit as st
import requests
import json
from time import sleep


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Reports Analyzer",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

from utils import controller

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
    <style>
        .stExpander {
            border-radius: 10px;
            border: 1px solid rgba(49, 51, 63, 0.2);
            margin-bottom: 1rem;
        }
        .stExpander:hover {
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }
        .report-header {
            font-size: 1.1rem !important;
            font-weight: 600 !important;
        }
        .ready-badge {
            background-color: #28a745 !important;
            color: white !important;
            padding: 3px 10px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        .processing-badge {
            background-color: #ffc107 !important;
            color: black !important;
            padding: 3px 10px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        .stButton>button {
            border-radius: 8px;
            padding: 8px 16px;
            transition: all 0.3s;
        }
        .stButton>button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .bad-segment {
            background-color: #fff8e1;
            padding: 8px 12px;
            border-radius: 6px;
            margin: 4px 0;
            border-left: 4px solid #ffc107;
        }
        .file-path {
            font-family: monospace;
            background-color: #f5f5f5;
            padding: 6px 10px;
            border-radius: 4px;
            font-size: 0.9em;
        }
    </style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
st.title("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
st.markdown("–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π")


# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
@st.fragment
def show_loading():
    with st.empty():
        for i in range(3):
            st.write("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö" + "." * (i + 1))
            sleep(0.5)
        st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(ttl=60, show_spinner=False)
def fetch_reports(limit=10, offset=0):
    url = f"http://127.0.0.1:8000/ads/reports/paginate?limit={limit}&offset={offset}"
    try:
        response = requests.get(
            url,
            headers={
                "accept": "application/json",
                "Cookie": f"ads_analyzer={controller.get('ads_token')}"
            },
            timeout=10
        )
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            print(controller.get("ads_token"))
            return []
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
        return []


# –§–∏–ª—å—Ç—Ä—ã –≤ —Å–∞–π–¥–±–∞—Ä–µ
with st.sidebar:
    st.header("–§–∏–ª—å—Ç—Ä—ã")
    status_filter = st.selectbox(
        "–°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞",
        ["–í—Å–µ", "–ì–æ—Ç–æ–≤", "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"],
        index=0
    )
    company_id_filter = st.text_input("–§–∏–ª—å—Ç—Ä –ø–æ ID –∫–æ–º–ø–∞–Ω–∏–∏")

    st.markdown("---")
    st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**")
    if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
        st.cache_data.clear()

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤..."):
    reports = fetch_reports()
    if reports:
        show_loading()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
if reports:
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_reports = reports
    if status_filter != "–í—Å–µ":
        filtered_reports = [r for r in filtered_reports if
                            (r['is_ready'] and status_filter == "–ì–æ—Ç–æ–≤") or
                            (not r['is_ready'] and status_filter == "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ")]

    if company_id_filter:
        filtered_reports = [r for r in filtered_reports if company_id_filter in str(r['company_id'])]

    if not filtered_reports:
        st.warning("–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")
    else:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–≤–µ—Ä—Ö—É
        ready_count = sum(1 for r in filtered_reports if r['is_ready'])
        total_count = len(filtered_reports)

        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤", total_count)
        with col2:
            st.metric("–ì–æ—Ç–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤", ready_count)
        with col3:
            st.metric("–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", total_count - ready_count)

        st.divider()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
        for report in filtered_reports:
            status_badge = (
                '–ì–æ—Ç–æ–≤' if report['is_ready']
                else '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'
            )

            with st.expander(
                    f"üìã **–û—Ç—á–µ—Ç #{report['id']}** &nbsp;&nbsp;|&nbsp;&nbsp; "
                    f"üè¢ **–ö–æ–º–ø–∞–Ω–∏—è {report['company_id']}** &nbsp;&nbsp;|&nbsp;&nbsp; "
                    f"{status_badge}",
                    expanded=False
            ):
                col1, col2 = st.columns([1, 1.5])

                with col1:
                    st.markdown("#### üìå –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                    st.markdown(f"**üìß Email:** {report['user_email']}")
                    st.markdown(f"**üÜî ID –∫–æ–º–ø–∞–Ω–∏–∏:** `{report['company_id']}`")

                    if report['is_ready']:
                        st.markdown(f"**‚úÖ –°—Ç–∞—Ç—É—Å:** <span class='ready-badge'>–ì–æ—Ç–æ–≤</span>", unsafe_allow_html=True)
                    else:
                        st.markdown(f"**‚è≥ –°—Ç–∞—Ç—É—Å:** <span class='processing-badge'>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</span>",
                                    unsafe_allow_html=True)

                    st.markdown(f"**‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** {report['info']}")

                with col2:
                    st.markdown("#### üîç –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞")

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ bad_segments
                    try:
                        bad_segments = json.loads(report['bad_segments'])
                        if isinstance(bad_segments, dict):
                            st.markdown("**‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:**")
                            for key, value in bad_segments.items():
                                st.markdown(
                                    f"<div class='bad-segment'>"
                                    f"<strong>–ö–ª–∞—Å—Ç–µ—Ä {key}:</strong> {value}"
                                    f"</div>",
                                    unsafe_allow_html=True
                                )
                        else:
                            st.markdown(f"**‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:** {bad_segments}")
                    except:
                        st.markdown(f"**‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:** {report['bad_segments']}")

                if report['is_ready']:
                    st.divider()
                    st.markdown("#### üöÄ –î–µ–π—Å—Ç–≤–∏—è")
                    st.html(f'''
                        <a href="/statistic?report_id={report['id']}" role="button" target="_blank">
                            Visit Page
                        </a>
                    ''',)
else:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.")