import streamlit as st
import requests
import json
from time import sleep

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Reports Analyzer",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
st.markdown("–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π")

# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
@st.fragment
def show_loading():
    with st.empty():
        for i in range(3):
            st.write("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö" + "." * (i + 1))
            sleep(0.5)
        st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(ttl=60, show_spinner=False)
def fetch_reports(limit=10, offset=0):
    url = f"http://127.0.0.1:8000/ads/reports/paginate?limit={limit}&offset={offset}"
    try:
        response = requests.get(
            url,
            headers={
                "accept": "application/json",
                "Cookie": f"ads_analyzer={st.session_state['token']}"
            },
            timeout=10
        )
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            return []
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
        return []

# –§–∏–ª—å—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
with st.sidebar:
    st.header("–§–∏–ª—å—Ç—Ä—ã")
    status_filter = st.selectbox("–°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞", ["–í—Å–µ", "–ì–æ—Ç–æ–≤", "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"])
    company_id_filter = st.text_input("–§–∏–ª—å—Ç—Ä –ø–æ ID –∫–æ–º–ø–∞–Ω–∏–∏")

    st.markdown("---")
    st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**")
    if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
        st.cache_data.clear()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤..."):
    reports = fetch_reports()
    if reports:
        show_loading()

# –û—Å–Ω–æ–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
if reports:
    filtered_reports = reports
    if status_filter != "–í—Å–µ":
        filtered_reports = [
            r for r in filtered_reports if
            (r['is_ready'] and status_filter == "–ì–æ—Ç–æ–≤") or
            (not r['is_ready'] and status_filter == "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        ]

    if company_id_filter:
        filtered_reports = [r for r in filtered_reports if company_id_filter in str(r['company_id'])]

    if not filtered_reports:
        st.warning("–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")
    else:
        ready_count = sum(1 for r in filtered_reports if r['is_ready'])
        total_count = len(filtered_reports)

        col1, col2, col3 = st.columns(3)
        col1.metric("–í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤", total_count)
        col2.metric("–ì–æ—Ç–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤", ready_count)
        col3.metric("–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", total_count - ready_count)

        st.divider()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        for report in filtered_reports:
            status_label = "–ì–æ—Ç–æ–≤" if report['is_ready'] else "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"

            with st.expander(
                f"üìã –û—Ç—á–µ—Ç #{report['id']} | –ö–æ–º–ø–∞–Ω–∏—è {report['company_id']} | {status_label}"
            ):
                col1, col2 = st.columns([1, 1.5])

                with col1:
                    st.subheader("üìå –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                    st.markdown(f"–°–æ–∑–¥–∞—Ç–µ–ª—å –†–ö: {report['user_email']}")
                    st.text(f"ID –∫–æ–º–ø–∞–Ω–∏–∏: {report['company_id']}")
                    st.text(f"–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {status_label}")
                    st.markdown(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: `{report['info']}`")

                with col2:
                    st.subheader("üîç –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞")
                    try:
                        bad_segments = json.loads(report['bad_segments'])
                        if isinstance(bad_segments, dict):
                            for key, value in bad_segments.items():
                                st.warning(f"–ö–ª–∞—Å—Ç–µ—Ä {key}: {value}")
                        else:
                            st.warning(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã: {bad_segments}")
                    except:
                        st.warning(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã: {report['bad_segments']}")

                if report['is_ready']:
                    if st.button("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", key=f"btn_{report['id']}"):
                        st.session_state["last_report_id"] = report['id']
                        st.success(f"–í—ã–±—Ä–∞–Ω –æ—Ç—á–µ—Ç #{report['id']} (–ö–æ–º–ø–∞–Ω–∏—è: {report['company_id']})")
                        st.page_link("pages/üìà_statistic.py")
else:
    st.warning("–£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π")
