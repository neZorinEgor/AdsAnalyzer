import streamlit as st
import requests
import json
from time import sleep
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Reports Analyzer",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏ CSS –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
st.markdown("""
    <style>
    .report-card {
        border-radius: 10px;
        padding: 1.5em;
        margin-bottom: 1em;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    .report-card:hover {
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transform: translateY(-2px);
    }
    .status-ready {
        border-left: 5px solid #2ecc71;
    }
    .status-processing {
        border-left: 5px solid #f39c12;
    }
    .badge {
        display: inline-block;
        padding: 0.25em 0.6em;
        font-size: 75%;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 10px;
    }
    .badge-ready {
        color: white;
        background-color: #2ecc71;
    }
    .badge-processing {
        color: white;
        background-color: #f39c12;
    }
    .progress-container {
        height: 10px;
        background-color: #f1f1f1;
        border-radius: 5px;
        margin: 10px 0;
    }
    .progress-bar {
        height: 100%;
        border-radius: 5px;
        background-color: #4CAF50;
        width: 0%;
        transition: width 0.5s;
    }
    </style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º
st.title("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
st.markdown("""
    <div style="color: #666; margin-bottom: 2em;">
    –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–∏—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    </div>
""", unsafe_allow_html=True)


# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
@st.fragment
def show_loading():
    with st.empty():
        progress_bar = st.progress(0)
        status_text = st.empty()

        for i in range(1, 101):
            progress_bar.progress(i)
            status_text.text(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö... {i}%")
            sleep(0.02)

        progress_bar.empty()
        status_text.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        sleep(1)
        status_text.empty()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
@st.cache_data(ttl=60, show_spinner=False)
def fetch_reports(limit=100, offset=0):
    url = f"{st.secrets['api_url']}/ads/reports/paginate?limit={limit}&offset={offset}"
    try:
        with st.spinner("‚åõ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞..."):
            response = requests.get(
                url,
                headers={
                    "accept": "application/json",
                    "Cookie": f"ads_analyzer={st.session_state.get('token', '')}"
                },
                timeout=15
            )

        if response.status_code == 200:
            return response.json()
        elif response.status_code == 401:
            st.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
            return []
        else:
            st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code} - {response.text}")
            return []
    except requests.exceptions.RequestException as e:
        st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
        return []


# –§–∏–ª—å—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π
with st.sidebar:
    st.header("üîç –§–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    with st.expander("üìå –§–∏–ª—å—Ç—Ä—ã –æ—Ç—á–µ—Ç–æ–≤", expanded=True):
        status_filter = st.selectbox(
            "–°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞",
            ["–í—Å–µ", "–ì–æ—Ç–æ–≤", "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"],
            help="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        )

        company_id_filter = st.text_input(
            "ID –∫–æ–º–ø–∞–Ω–∏–∏",
            placeholder="–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–ø–∞–Ω–∏–∏",
            help="–ü–æ–∏—Å–∫ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"
        )

        date_filter = st.date_input(
            "–ü–µ—Ä–∏–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è",
            [],
            help="–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"
        )

    st.divider()

    with st.expander("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", expanded=True):
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True, help="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞"):
            st.cache_data.clear()
            st.rerun()

        if 'reports' in locals():
            total_reports = len(reports)
            ready_reports = sum(1 for r in reports if r['is_ready'])

            st.metric("–í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤", total_reports)
            st.metric("–ì–æ—Ç–æ–≤–æ",
                      f"{ready_reports} ({ready_reports / total_reports * 100:.0f}%)" if total_reports else "0")
            st.progress(ready_reports / total_reports if total_reports else 0)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
if 'reports' not in st.session_state or st.sidebar.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    reports = fetch_reports()
    if reports:
        show_loading()
        st.session_state.reports = reports

reports = st.session_state.get('reports', [])

# –û—Å–Ω–æ–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤
if reports:
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_reports = reports.copy()

    if status_filter != "–í—Å–µ":
        filtered_reports = [
            r for r in filtered_reports if
            (r['is_ready'] and status_filter == "–ì–æ—Ç–æ–≤") or
            (not r['is_ready'] and status_filter == "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        ]

    if company_id_filter:
        filtered_reports = [r for r in filtered_reports if company_id_filter.lower() in str(r['company_id']).lower()]

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç—á–µ—Ç–∞–º
    if filtered_reports:
        ready_count = sum(1 for r in filtered_reports if r['is_ready'])
        total_count = len(filtered_reports)

        st.subheader("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        cols = st.columns(4)
        cols[0].metric("–ù–∞–π–¥–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤", total_count)
        cols[1].metric("–ì–æ—Ç–æ–≤–æ", ready_count)
        cols[2].metric("–í —Ä–∞–±–æ—Ç–µ", total_count - ready_count)
        cols[3].metric("–ü—Ä–æ–≥—Ä–µ—Å—Å", f"{ready_count / total_count * 100:.0f}%" if total_count else "0%")

        with cols[3]:
            st.progress(ready_count / total_count if total_count else 0)

        st.divider()
        st.subheader("üìã –°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        for report in filtered_reports:
            status_label = "–ì–æ—Ç–æ–≤" if report['is_ready'] else "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
            status_class = "ready" if report['is_ready'] else "processing"
            badge_class = "badge-ready" if report['is_ready'] else "badge-processing"

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            created_at = datetime.fromisoformat(report.get('created_at', '')).strftime("%d.%m.%Y %H:%M") if report.get(
                'created_at') else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

            with st.container():
                st.markdown(f"""
                    <div class="report-card status-{status_class}">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <h3 style="margin: 0;">–û—Ç—á–µ—Ç #{report['id']}</h3>
                            <span class="badge {badge_class}">{status_label}</span>
                        </div>
                        <div style="margin: 0.5em 0; color: #666;">–°–æ–∑–¥–∞–Ω: {created_at}</div>
                        <div style="display: flex; gap: 2em; margin-top: 1em;">
                            <div>
                                <strong>–ö–æ–º–ø–∞–Ω–∏—è:</strong> {report['company_id']}<br>
                                <strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {report['user_email']}
                            </div>
                            <div>
                                <strong>–°—Ç–∞—Ç—É—Å:</strong> {report['info'] or '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}
                            </div>
                        </div>
                    </div>
                """, unsafe_allow_html=True)

                # –î–µ—Ç–∞–ª–∏ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–º—Å—è –±–ª–æ–∫–µ
                with st.expander("üîç –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", expanded=False):
                    col1, col2 = st.columns([1, 1.5])

                    with col1:
                        st.markdown("**üìå –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**")
                        st.markdown(f"""
                            - **ID –æ—Ç—á–µ—Ç–∞:** `{report['id']}`
                            - **–ö–æ–º–ø–∞–Ω–∏—è:** `{report['company_id']}`
                            - **–°—Ç–∞—Ç—É—Å:** `{status_label}`
                            - **–°–æ–∑–¥–∞–Ω:** `{created_at}`
                            - **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** `{report['user_email']}`
                        """)

                    with col2:
                        st.markdown("**üîç –ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã**")
                        try:
                            bad_segments = json.loads(report['bad_segments'])
                            if isinstance(bad_segments, dict):
                                for key, value in bad_segments.items():
                                    st.warning(f"**–ö–ª–∞—Å—Ç–µ—Ä {key}:** {value}")
                            else:
                                st.warning(f"**–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:** {bad_segments}")
                        except:
                            st.warning(f"**–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:** {report['bad_segments']}")

                    if report['is_ready']:
                        st.divider()
                        if st.button(
                            "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç",
                            key=f"view_{report['id']}",
                            help="–û—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ –∞–Ω–∞–ª–∏–∑–æ–º",
                            on_click=lambda r=report: st.session_state.update({
                                "last_report_id": r['id'],
                                "last_company_id": r['company_id']
                            })):
                            st.session_state["last_report_id"] = report['id']
                            st.page_link("pages/üìà_statistic.py")

                st.divider()
    else:
        st.warning("üö´ –ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")
        st.image("https://cdn-icons-png.flaticon.com/512/4076/4076478.png", width=150)
else:
    # –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
    st.markdown("""
        <div style="text-align: center; padding: 3em; color: #666;">
            <img src="https://cdn-icons-png.flaticon.com/512/4076/4076478.png" width="150" style="margin-bottom: 1em;">
            <h3>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∞–Ω–∞–ª–∏–∑</h3>
            <p>–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π</p>
            <button class="stButton" style="margin-top: 1em;">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑</button>
        </div>
    """, unsafe_allow_html=True)