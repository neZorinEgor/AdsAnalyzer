import json
import random

import requests
import pandas as pd
import streamlit as st
import plotly.express as px
from io import StringIO

st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π", page_icon="üìä")


def fetch_data(report_id):
    url = f"http://127.0.0.1:8000/ads/report/{report_id}"
    headers = {
        "accept": "application/json",
        "Cookie": f"ads_analyzer={st.session_state['token']}"
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        json_data = response.json()
        clustered_df = pd.read_json(StringIO(json_data.get("clustered_df")))
        impact_info_df = pd.read_json(StringIO(json_data.get("impact_df")))
        impact_info_df = impact_info_df.rename(columns={'Unnamed: 0': '–ú–µ—Ç—Ä–∏–∫–∞'})
        return {
            "clustered_df": clustered_df,
            "impact_df": impact_info_df,
            "bad_segments": json.loads(json_data.get("bad_segments")),
            "llm_response": json_data["llm_response"]
        }
    else:
        st.warning("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return None


def generate_colors(n):
    return [f"hsl({random.randint(0, 360)}, 100%, 50%)" for _ in range(n)]


data = fetch_data(report_id=st.session_state["last_report_id"])
if data is None:
    st.stop()
    st.warning("–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")


cluster_info_df = data["clustered_df"]
impact_df = data["impact_df"]
bad_segments = data.get("bad_segments", {})
llm_response = data.get("llm_response")
colors = generate_colors(cluster_info_df['cluster_id'].nunique())
# clusters_id = list(set(cluster_info_df["cluster_id"]))

# –°–∞–π–¥–±–∞—Ä
with st.sidebar:
    st.header("üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    total_clusters = cluster_info_df['cluster_id'].nunique()
    st.metric("–í—Å–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", total_clusters)

    problem_clusters = sum(1 for seg in bad_segments.values() if seg != "–Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ")
    st.metric("–ö–ª–∞—Å—Ç–µ—Ä–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏", f"{problem_clusters}/{total_clusters}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
st.title("–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
st.markdown("""
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
""")

# –í–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3 = st.tabs(["üìä –ö–ª–∞—Å—Ç–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π", "üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", "‚ö† –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã"])

# –ö–ª–∞—Å—Ç–µ—Ä—ã
with tab1:
    st.header("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º")
    col1, col2 = st.columns([2, 1])
    with col1:
        fig = px.scatter(
            cluster_info_df,
            x="pca_1",
            y="pca_2",
            color="cluster_id",
            color_discrete_sequence=colors,
            hover_data=cluster_info_df.columns,
            labels={"x": "–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ 1", "y": "–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ 2"},
            title="–ö–∞—Ä—Ç–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
            size_max=10,
            opacity=0.7,
        )
        st.plotly_chart(fig)
    with col2:
        st.subheader("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
        cluster_stats = cluster_info_df['cluster_id'].value_counts().reset_index()
        cluster_stats.columns = ['–ö–ª–∞—Å—Ç–µ—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π']
        st.dataframe(cluster_stats, height=150)

    st.divider()

# üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
with tab2:
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df_melted = impact_df.melt(id_vars='–ú–µ—Ç—Ä–∏–∫–∞', var_name='–ö–ª–∞—Å—Ç–µ—Ä', value_name='–í–ª–∏—è–Ω–∏–µ')

    # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    max_values = impact_df.set_index('–ú–µ—Ç—Ä–∏–∫–∞').max(axis=1)
    min_values = impact_df.set_index('–ú–µ—Ç—Ä–∏–∫–∞').min(axis=1)

    st.title('üìä –í–ª–∏—è–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏')
    st.markdown("""
    <div style="background-color:#f0f2f6;padding:15px;border-radius:10px;margin-bottom:20px;">
        –ó–¥–µ—Å—å –ø–æ–∫–∞–∑–∞–Ω–æ, –∫–∞–∫ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã –∞—É–¥–∏—Ç–æ—Ä–∏–∏ <b>–≤–ª–∏—è—é—Ç –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b> —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏.<br>
        üëâ <i>–ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–ª–∏—è–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é.</i>
    </div>
    """, unsafe_allow_html=True)

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    chart_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞",
                              ["üìä –°—Ç–æ–ª–±—á–∞—Ç—ã–π (–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π)",
                               "üìä –°—Ç–æ–ª–±—á–∞—Ç—ã–π (–ø–æ –≥—Ä—É–ø–ø–∞–º)",
                               "üìà –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫",
                               "üå°Ô∏è –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞"])

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    if chart_type == "üìä –°—Ç–æ–ª–±—á–∞—Ç—ã–π (–ø–æ –≥—Ä—É–ø–ø—ã)":
        fig = px.bar(df_melted, x='–ú–µ—Ç—Ä–∏–∫–∞', y='–í–ª–∏—è–Ω–∏–µ', color='–ö–ª–∞—Å—Ç–µ—Ä', barmode='group')
    elif chart_type == "üìä –°—Ç–æ–ª–±—á–∞—Ç—ã–π (–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π)":
        fig = px.bar(df_melted, y='–ú–µ—Ç—Ä–∏–∫–∞', x='–í–ª–∏—è–Ω–∏–µ', color='–ö–ª–∞—Å—Ç–µ—Ä', barmode='stack', orientation='h')
    elif chart_type == "üìà –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫":
        fig = px.line(df_melted, x='–ú–µ—Ç—Ä–∏–∫–∞', y='–í–ª–∏—è–Ω–∏–µ', color='–ö–ª–∞—Å—Ç–µ—Ä', markers=True)
    else:  # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞
        heat_df = impact_df.set_index('–ú–µ—Ç—Ä–∏–∫–∞')
        fig = px.imshow(heat_df, text_auto=True, aspect="auto",
                        color_continuous_scale='RdBu',
                        labels=dict(x="–ö–ª–∞—Å—Ç–µ—Ä", y="–ú–µ—Ç—Ä–∏–∫–∞", color="–í–ª–∏—è–Ω–∏–µ"))

    fig.update_layout(
        xaxis_title='–ú–µ—Ç—Ä–∏–∫–∞',
        yaxis_title='–í–ª–∏—è–Ω–∏–µ',
        hovermode='x unified',
        height=600
    )
    st.plotly_chart(fig, use_container_width=True)

    # –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    st.subheader("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º")
    clusters = [col for col in impact_df.columns if col != '–ú–µ—Ç—Ä–∏–∫–∞']

    for cluster in clusters:
        with st.expander(f"### üéØ –ö–ª–∞—Å—Ç–µ—Ä {cluster}", expanded=False):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
            cluster_data = cluster_info_df[cluster_info_df["cluster_id"] == int(cluster)]

            # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–∞–∫–µ—Ç–∞
            col1, col2, col3 = st.columns([1, 1, 2])

            with col1:
                # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –ø–æ–ª—É
                if "–ü–æ–ª" in cluster_data.columns:
                    gender_dist = cluster_data["–ü–æ–ª"].value_counts(normalize=True) * 100
                    fig_gender = px.pie(
                        values=gender_dist.values,
                        names=gender_dist.index.str.replace('GENDER_', ''),
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ª—É",
                        hole=0.4,
                        color_discrete_sequence=px.colors.qualitative.Pastel
                    )
                    fig_gender.update_layout(showlegend=False, margin=dict(t=40, b=10))
                    st.plotly_chart(fig_gender, use_container_width=True)

            with col2:
                # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
                if "–í–æ–∑—Ä–∞—Å—Ç" in cluster_data.columns:
                    age_dist = cluster_data["–í–æ–∑—Ä–∞—Å—Ç"].value_counts(normalize=True) * 100
                    fig_age = px.pie(
                        values=age_dist.values,
                        names=age_dist.index.str.replace('AGE_', '').str.replace('_', '-'),
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É",
                        hole=0.4,
                        color_discrete_sequence=px.colors.qualitative.Pastel1
                    )
                    fig_age.update_layout(showlegend=False, margin=dict(t=40, b=10))
                    st.plotly_chart(fig_age, use_container_width=True)

            with col3:
                # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                cluster_cost = cluster_data["–†–∞—Å—Ö–æ–¥ (—Ä—É–±.)"].sum() / 1000000
                avg_ctr = cluster_data["CTR (%)"].mean()
                avg_cpc = cluster_data["–°—Ä. —Ü–µ–Ω–∞ –∫–ª–∏–∫–∞ (—Ä—É–±.)"].mean()/1000000

                st.markdown(f"""
                <div style="background:linear-gradient(135deg, #f8f9fa, #e9ecef);padding:15px;border-radius:10px;margin-bottom:15px;border-left:4px solid #6c757d;">
                    <div style="font-size:16px;color:#6c757d;">–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã</div>
                    <div style="font-size:24px;font-weight:bold;color:#2c3e50;">{cluster_cost:,.1f} ‚ÇΩ</div>
                </div>
                """, unsafe_allow_html=True)

                metric_col1, metric_col2 = st.columns(2)
                with metric_col1:
                    st.markdown(f"""
                    <div style="background:#f8f9fa;padding:10px;border-radius:10px;margin-bottom:10px;text-align:center;box-shadow:0 2px 4px rgba(0,0,0,0.05);">
                        <div style="font-size:14px;color:#6c757d;">–°—Ä–µ–¥–Ω–∏–π CTR</div>
                        <div style="font-size:20px;font-weight:bold;color:#2c3e50;">{avg_ctr:.2f}%</div>
                    </div>
                    """, unsafe_allow_html=True)

                with metric_col2:
                    st.markdown(f"""
                    <div style="background:#f8f9fa;padding:10px;border-radius:10px;margin-bottom:10px;text-align:center;box-shadow:0 2px 4px rgba(0,0,0,0.05);">
                        <div style="font-size:14px;color:#6c757d;">–¶–µ–Ω–∞ –∫–ª–∏–∫–∞</div>
                        <div style="font-size:20px;font-weight:bold;color:#2c3e50;">{avg_cpc:,.1f} ‚ÇΩ</div>
                    </div>
                    """, unsafe_allow_html=True)

            st.markdown("---")

            # –í–ª–∏—è–Ω–∏–µ –Ω–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏
            st.markdown("### üìà –í–ª–∏—è–Ω–∏–µ –Ω–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–∞–∫—Å–∏–º—É–º–∞)")
            with st.container():
                st.markdown("""
                <style>
                    .metric-progress {
                        width: 100%;
                        margin-bottom: 15px;
                    }
                    .metric-header {
                        display: flex;
                        justify-content: space-between;
                        margin-bottom: 5px;
                        font-size: 14px;
                    }
                    .metric-name {
                        white-space: nowrap;
                        overflow: hidden;
                        text-overflow: ellipsis;
                        max-width: 70%;
                    }
                    .metric-value {
                        color: #495057;
                        font-weight: bold;
                    }
                    .progress-container {
                        height: 10px;
                        background-color: #e9ecef;
                        border-radius: 5px;
                        overflow: hidden;
                    }
                    .progress-bar {
                        height: 100%;
                        border-radius: 5px;
                    }
                    .metric-comparison {
                        font-size: 12px;
                        color: #6c757d;
                        text-align: right;
                        margin-top: 2px;
                    }
                </style>
                """, unsafe_allow_html=True)

                for metric in impact_df['–ú–µ—Ç—Ä–∏–∫–∞'].unique():
                    val = impact_df[impact_df['–ú–µ—Ç—Ä–∏–∫–∞'] == metric].iloc[0][cluster]
                    max_val = max_values[metric]
                    min_val = min_values[metric]

                    if max_val > 0:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
                        percentage = (val / max_val) * 100
                        color = "#2ecc71" if percentage > 75 else "#3498db" if percentage > 40 else "#f39c12"

                        st.markdown(f"""
                        <div class="metric-progress">
                            <div class="metric-header">
                                <span class="metric-name" title="{metric}">{metric}</span>
                                <span class="metric-value">{val:.3f}</span>
                            </div>
                            <div class="progress-container">
                                <div class="progress-bar" style="width:{percentage}%;background-color:{color};"></div>
                            </div>
                            <div class="metric-comparison">
                                –ú–∞–∫—Å: {max_val:.3f} | –ú–∏–Ω: {min_val:.3f}
                            </div>
                        </div>
                        """, unsafe_allow_html=True)

            st.markdown("---")

            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞
            st.markdown("### üîç –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏")

            unique_features = []
            for metric in impact_df['–ú–µ—Ç—Ä–∏–∫–∞'].unique():
                row = impact_df[impact_df['–ú–µ—Ç—Ä–∏–∫–∞'] == metric].iloc[0]
                values = row[clusters]
                if values[cluster] == max_values[metric] and max_values[metric] > 0:
                    unique_features.append((metric, values[cluster]))

            if unique_features:
                for metric, val in sorted(unique_features, key=lambda x: x[1], reverse=True):
                    st.markdown(f"""
                    <div style="background:#e8f7f0;padding:12px;border-radius:8px;margin-bottom:10px;border-left:4px solid #2ecc71;">
                        <div style="display:flex;align-items:center;">
                            <span style="margin-right:10px;font-size:20px;">üèÜ</span>
                            <div>
                                <div style="font-weight:bold;color:#27ae60;">{metric}</div>
                                <div>–ù–∞–∏–±–æ–ª—å—à–µ–µ –≤–ª–∏—è–Ω–∏–µ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: <b>{val:.3f}</b></div>
                            </div>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.markdown("""
                <div style="background:#f8f9fa;padding:15px;border-radius:8px;text-align:center;color:#6c757d;">
                    –≠—Ç–æ—Ç –∫–ª–∞—Å—Ç–µ—Ä –Ω–µ –∏–º–µ–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤–ª–∏—è–Ω–∏–µ–º
                </div>
                """, unsafe_allow_html=True)
    st.markdown(llm_response)

# ‚ö† –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
with tab3:
    st.header("üîç –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã", divider="red")

    if not bad_segments:
        col1, col2, col3 = st.columns([1, 3, 1])
        with col2:
            st.markdown("""
            <div style="text-align: center; padding: 2em; border-radius: 10px; 
                        background-color: #f0f8ff; margin: 1em 0;">
                <h3 style="color: #2e7d32;">üéâ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!</h3>
                <p>–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ</p>
                <p style="font-size: 0.9em; color: #666;">
                –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                </p>
            </div>
            """, unsafe_allow_html=True)

            st.markdown("""
            <div style="text-align: center; margin-top: 1em;">
                <p>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</p>
                <ul style="display: inline-block; text-align: left;">
                    <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</li>
                    <li>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
    else:
        problematic_found = False
        for cluster, problem in bad_segments.items():
            if problem != "–Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ":
                problematic_found = True
                with st.container(border=True):
                    # –®–∞–ø–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
                    cols = st.columns([1, 10])
                    with cols[0]:
                        st.markdown(f"### üè∑Ô∏è {cluster}")
                    with cols[1]:
                        st.error(f"**–ü—Ä–æ–±–ª–µ–º–∞:** {problem}", icon="‚ö†Ô∏è")

                    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    with st.expander("üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", expanded=True):
                        if "CTR" in problem:
                            st.markdown("""
                            - **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫—Ä–µ–∞—Ç–∏–≤–æ–≤:**
                              - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                              - –£–ª—É—á—à–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ñ—Ñ–µ—Ä–æ–≤
                            """)

                        if "—Å—Ç–∞–≤–∫–∞" in problem or "–¥–æ—Ä–æ–≥–æ" in problem:
                            st.markdown("""
                            - **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç–∞–≤–æ–∫:**
                              - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏
                              - –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∞—É–∫—Ü–∏–æ–Ω–∞
                            """)

                        if "–∫–æ–Ω–≤–µ—Ä—Å–∏–∏" in problem:
                            st.markdown("""
                            - **–ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏:**
                              - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å UX –ø–æ—Å–∞–¥–æ—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                              - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
                            """)

                    # –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
                    st.button(
                        "–£–±—Ä–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏",
                        key=f"fix_{cluster}",
                        help=f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster}",
                        use_container_width=True
                    )
        if not problematic_found:
            st.info("‚ÑπÔ∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º –∞–Ω–∞–ª–∏–∑–µ", icon="‚ÑπÔ∏è")