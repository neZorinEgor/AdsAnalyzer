import json
import numpy as np
import requests
import pandas as pd
import streamlit as st
import plotly.express as px
from io import StringIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π", page_icon="üìä")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def fetch_data(report_id):
    url = f"http://127.0.0.1:8000/ads/report/{report_id}"
    headers = {
        "accept": "application/json",
        "Cookie": f"ads_analyzer={st.session_state['token']}"
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        json_data = response.json()
        clustered_df = pd.read_json(StringIO(json_data.get("clustered_df")))
        impact_info_df = pd.read_json(StringIO(json_data.get("impact_df")))
        impact_info_df = impact_info_df.rename(columns={'Unnamed: 0': '–ú–µ—Ç—Ä–∏–∫–∞'})
        return {
            "clustered_df": clustered_df,
            "impact_df": impact_info_df,
            "bad_segments": json.loads(json_data.get("bad_segments"))
        }
    else:
        st.warning("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return None


# –ó–∞–≥—Ä—É–∑–∫–∞
data = fetch_data(report_id=st.session_state["last_report_id"])
if data is None:
    st.stop()

cluster_info_df = data["clustered_df"]
impact_df = data["impact_df"]
bad_segments = data.get("bad_segments", {})
# clusters_id = list(set(cluster_info_df["cluster_id"]))

# –°–∞–π–¥–±–∞—Ä
with st.sidebar:
    st.header("üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    total_clusters = cluster_info_df['cluster_id'].nunique()
    st.metric("–í—Å–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", total_clusters)

    problem_clusters = sum(1 for seg in bad_segments.values() if seg != "–Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ")
    st.metric("–ö–ª–∞—Å—Ç–µ—Ä–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏", f"{problem_clusters}/{total_clusters}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
st.title("–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
st.markdown("""
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
""")

# –í–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3 = st.tabs(["üìä –ö–ª–∞—Å—Ç–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π", "üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", "‚ö† –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã"])

# üìä –ö–ª–∞—Å—Ç–µ—Ä—ã
with tab1:
    st.header("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º")
    col1, col2 = st.columns([2, 1])
    with col1:
        fig = px.scatter(
            cluster_info_df,
            x="pca_1",
            y="pca_2",
            color="cluster_id",
            hover_data=cluster_info_df.columns,
            labels={"x": "–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ 1", "y": "–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ 2"},
            title="–ö–∞—Ä—Ç–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
            size_max=10,
            opacity=0.7,
        )
        st.plotly_chart(fig)
    with col2:
        st.subheader("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
        cluster_stats = cluster_info_df['cluster_id'].value_counts().reset_index()
        cluster_stats.columns = ['–ö–ª–∞—Å—Ç–µ—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π']
        st.dataframe(cluster_stats, height=150)

    st.divider()
    st.markdown("""
    **–ó–∞—á–µ–º –º—ã –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Ç–µ—Ä—ã?**

    üîç **–ü–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞–º–ø–∞–Ω–∏–∏**  
    üéØ **–¢–æ—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±—é–¥–∂–µ—Ç–∞**  
    üìä **–í—ã—è–≤–ª–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫**  
    ‚ö† **–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º**
    """)

# üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
with tab2:
    df_melted = impact_df.melt(id_vars='–ú–µ—Ç—Ä–∏–∫–∞', var_name='–ö–ª–∞—Å—Ç–µ—Ä', value_name='–í–ª–∏—è–Ω–∏–µ')

    st.title('üìä –í–ª–∏—è–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏')
    st.markdown("""
    –ó–¥–µ—Å—å –ø–æ–∫–∞–∑–∞–Ω–æ, –∫–∞–∫ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã –∞—É–¥–∏—Ç–æ—Ä–∏–∏ **–≤–ª–∏—è—é—Ç –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏** —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏.

    üëâ *–ü–æ–¥ ¬´–≤–ª–∏—è–Ω–∏–µ–º¬ª –ø–æ–Ω–∏–º–∞–µ—Ç—Å—è –≤–∫–ª–∞–¥ —Å–µ–≥–º–µ–Ω—Ç–∞ –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏.*
    """)

    chart_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", ["üìä –°—Ç–æ–ª–±—á–∞—Ç—ã–π (–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π)", "üìä –°—Ç–æ–ª–±—á–∞—Ç—ã–π (–ø–æ –≥—Ä—É–ø–ø–∞–º)", "üìà –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "üå°Ô∏è –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞"])

    if chart_type == "üìä –°—Ç–æ–ª–±—á–∞—Ç—ã–π (–ø–æ –≥—Ä—É–ø–ø–∞–º)":
        fig = px.bar(df_melted, x='–ú–µ—Ç—Ä–∏–∫–∞', y='–í–ª–∏—è–Ω–∏–µ', color='–ö–ª–∞—Å—Ç–µ—Ä', barmode='group')
    elif chart_type == "üìä –°—Ç–æ–ª–±—á–∞—Ç—ã–π (–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π)":
        fig = px.bar(df_melted, y='–ú–µ—Ç—Ä–∏–∫–∞', x='–í–ª–∏—è–Ω–∏–µ', color='–ö–ª–∞—Å—Ç–µ—Ä', barmode='stack', orientation='h')
    elif chart_type == "üìà –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫":
        fig = px.line(df_melted, x='–ú–µ—Ç—Ä–∏–∫–∞', y='–í–ª–∏—è–Ω–∏–µ', color='–ö–ª–∞—Å—Ç–µ—Ä', markers=True)
    else:  # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞
        heat_df = impact_df.set_index('–ú–µ—Ç—Ä–∏–∫–∞')
        fig = px.imshow(heat_df, text_auto=True, aspect="auto", color_continuous_scale='RdBu', labels=dict(x="–ö–ª–∞—Å—Ç–µ—Ä", y="–ú–µ—Ç—Ä–∏–∫–∞", color="–í–ª–∏—è–Ω–∏–µ"))

    fig.update_layout(
        xaxis_title='–ú–µ—Ç—Ä–∏–∫–∞',
        yaxis_title='–í–ª–∏—è–Ω–∏–µ',
        hovermode='x unified',
        xaxis={'categoryorder': 'total descending'},
        height=600
    )
    fig.update_xaxes(tickangle=45)
    st.plotly_chart(fig, use_container_width=True)

    st.subheader("üìÑ –¢–∞–±–ª–∏—Ü–∞ —Å –≤–ª–∏—è–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º")
    st.dataframe(impact_df, height=500, use_container_width=True)

    st.subheader("üîç –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")

    clusters = [col for col in impact_df.columns if col != '–ú–µ—Ç—Ä–∏–∫–∞']
    cluster_descriptions = {cluster: {'–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏': [], '—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ_–º–µ—Ç—Ä–∏–∫–∏': []} for cluster in clusters}

    for metric in impact_df['–ú–µ—Ç—Ä–∏–∫–∞'].unique():
        row = impact_df[impact_df['–ú–µ—Ç—Ä–∏–∫–∞'] == metric].iloc[0]
        values = row[clusters]
        non_zero_values = values[values > 0]

        if len(non_zero_values) == 1:
            cluster = non_zero_values.idxmax()
            cluster_descriptions[cluster]['—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ_–º–µ—Ç—Ä–∏–∫–∏'].append(metric)
            continue

        max_val, min_val = values.max(), values.min()
        for cluster in clusters:
            val = values[cluster]
            if val == max_val and val > 0:
                cluster_descriptions[cluster]['–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏'].append(f"–í—ã–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –º–µ—Ç—Ä–∏–∫–µ **{metric}** (–≤–ª–∏—è–Ω–∏–µ: {val:.3f})")
            if val == min_val and min_val < max_val and val >= 0:
                cluster_descriptions[cluster]['–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏'].append(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –ø–æ –º–µ—Ç—Ä–∏–∫–µ **{metric}** ({val:.3f})")

    for cluster in clusters:
        with st.expander(f"### üß© –ö–ª–∞—Å—Ç–µ—Ä {cluster}"):

            if cluster_descriptions[cluster]['—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ_–º–µ—Ç—Ä–∏–∫–∏']:
                st.markdown("**–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**")
                for metric in cluster_descriptions[cluster]['—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ_–º–µ—Ç—Ä–∏–∫–∏']:
                    val = impact_df[impact_df['–ú–µ—Ç—Ä–∏–∫–∞'] == metric].iloc[0][cluster]
                    st.markdown(f"- {metric}: {val:.3f} (—Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –∫–ª–∞—Å—Ç–µ—Ä –≤–ª–∏—è–µ—Ç)")

            if cluster_descriptions[cluster]['–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏']:
                st.markdown("**–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**")
                for desc in cluster_descriptions[cluster]['–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏']:
                    st.markdown(f"- {desc}")
            else:
                st.markdown("_–ù–µ –≤—ã—è–≤–ª–µ–Ω—ã —è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏._")

            recommendations = []
            cluster_data = impact_df.set_index('–ú–µ—Ç—Ä–∏–∫–∞')[cluster]

            if '–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)' in cluster_data and cluster_data['–ü—Ä–∏–±—ã–ª—å (—Ä—É–±.)'] == cluster_data.max():
                recommendations.append("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞")
            if '–û—Ç–∫–∞–∑—ã (%)' in cluster_data and cluster_data['–û—Ç–∫–∞–∑—ã (%)'] == cluster_data.max():
                recommendations.append("üö® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–∞–¥–æ—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–∞–∑–æ–≤)")
            if '–°—Ä. —Ü–µ–Ω–∞ –∫–ª–∏–∫–∞ (—Ä—É–±.)' in cluster_data and cluster_data['–°—Ä. —Ü–µ–Ω–∞ –∫–ª–∏–∫–∞ (—Ä—É–±.)'] == cluster_data.max():
                recommendations.append("üìâ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ (–≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ –∫–ª–∏–∫–∞)")

            if recommendations:
                st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º:**")
                for rec in recommendations:
                    st.markdown(f"- {rec}")

            st.markdown("---")


# ‚ö† –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
with tab3:
    st.header("–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã")
    if not bad_segments:
        st.success("–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ. –ü—Ä–æ–±–ª–µ–º –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ.")
    else:
        for cluster, problem in bad_segments.items():
            if problem != "–Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ":
                st.markdown(f"### –ö–ª–∞—Å—Ç–µ—Ä {cluster}")
                st.error(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: {problem}")
                st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                if "CTR" in problem:
                    st.markdown("- –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ä–µ–∞—Ç–∏–≤—ã –∏ –æ—Ñ—Ñ–µ—Ä—ã")
                if "—Å—Ç–∞–≤–∫–∞" in problem or "–¥–æ—Ä–æ–≥–æ" in problem:
                    st.markdown("- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫")
                if "–∫–æ–Ω–≤–µ—Ä—Å–∏–∏" in problem:
                    st.markdown("- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ—Ä–æ–Ω–∫—É –ø—Ä–æ–¥–∞–∂")
                st.markdown("---")
