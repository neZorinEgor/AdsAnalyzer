import json
import numpy as np
import requests
import pandas as pd
import streamlit as st
import plotly.express as px
from io import StringIO
from streamlit_cookies_controller import CookieController

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π", page_icon="üìä")
controller = CookieController()


@st.cache_data
def fetch_data(report_id):
    url = f"http://127.0.0.1:8000/ads/report/{report_id}"
    headers = {
        "accept": "application/json",
        "Cookie": f"ads_analyzer={controller.get("ads_token")}"
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        clustered_df = pd.read_json(StringIO(response.json().get("clustered_df")))
        impact_info_df = pd.read_json(StringIO(response.json().get("impact_df")))
        impact_info_df = impact_info_df.rename(columns={'Unnamed: 0': '–ú–µ—Ç—Ä–∏–∫–∞'})
        # impact_df.col
        return {
            "clustered_df": clustered_df,
            "impact_df": impact_info_df,
            "bad_segments": json.loads(response.json().get("bad_segments"))
        }
    else:
        st.warning("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        print(response.text)
        return None


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = fetch_data(report_id=st.query_params["report_id"])
if data is None:
    st.stop()

cluster_info = data.get("clustered_df")
impact_df = data.get("impact_df")
bad_segments = data.get("bad_segments", {})
clusters_id = list(set(cluster_info["cluster_id"]))

# –°–∞–π–¥–±–∞—Ä —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
with st.sidebar:
    st.header("üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    total_clusters = cluster_info['cluster_id'].nunique()
    st.metric("–í—Å–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", total_clusters)

    # avg_cluster_size = round(cluster_info['cluster_id'].value_counts().mean(), 1)
    # st.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞", avg_cluster_size)

    problem_clusters = sum(1 for seg in bad_segments.values() if seg != "–Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ")
    st.metric("–ö–ª–∞—Å—Ç–µ—Ä–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏", f"{problem_clusters}/{total_clusters}")

# –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
st.title("–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
st.markdown("""
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
""")

# –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
tab1, tab2, tab3 = st.tabs(["üìä –ö–ª–∞—Å—Ç–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π", "üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", "‚ö† –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã"])

with tab1:
    st.header("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º")
    col1, col2 = st.columns([2, 1])
    with col1:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        fig = px.scatter(
            cluster_info,
            x="pca_1",
            y="pca_2",
            color="cluster_id",
            hover_data=cluster_info.columns,
            labels={"x": "–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ 1", "y": "–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ 2"},
            title="–ö–∞—Ä—Ç–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
            size_max=10,
            opacity=0.7,
        )
        st.plotly_chart(fig)
    with col2:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
        st.subheader("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
        cluster_stats = cluster_info['cluster_id'].value_counts().reset_index()
        cluster_stats.columns = ['–ö–ª–∞—Å—Ç–µ—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π']
        st.dataframe(cluster_stats, height=150)
    st.divider()
    st.markdown("""
    **–ó–∞—á–µ–º –º—ã –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Ç–µ—Ä—ã?**  

    –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–∏–¥–Ω—ã –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ:

    üîç **1. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞–º–ø–∞–Ω–∏–∏**  
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏:
    - –ü–æ—Ö–æ–∂–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    - –°—Ö–æ–∂–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (CTR, –∫–æ–Ω–≤–µ—Ä—Å–∏–∏)
    - –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

    üéØ **2. –¢–æ—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±—é–¥–∂–µ—Ç–∞**  
    –í–º–µ—Å—Ç–æ —Ç–æ—á–µ—á–Ω–æ–π –ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ:
    - –ú–∞—Å—Å–æ–≤–æ —É–ª—É—á—à–∞—Ç—å —Ü–µ–ª—ã–µ –≥—Ä—É–ø–ø—ã
    - –û—Ç–∫–ª—é—á–∞—Ç—å –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
    - –£–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –±—é–¥–∂–µ—Ç –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –≥—Ä—É–ø–ø

    üìä **3. –í—ã—è–≤–ª–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫**  
    –ê–Ω–∞–ª–∏–∑ —Å–∞–º—ã—Ö —É—Å–ø–µ—à–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ–∫–∞–∂–µ—Ç:
    - –ö–∞–∫–∏–µ –∫—Ä–µ–∞—Ç–∏–≤—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ª—É—á—à–µ
    - –ö–∞–∫–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–∞—é—Ç –º–∞–∫—Å–∏–º—É–º –∫–æ–Ω–≤–µ—Ä—Å–∏–π
    - –ö–∞–∫–∏–µ —Å–≤—è–∑–∫–∏ "—Ç–µ–∫—Å—Ç+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã

    ‚ö† **4. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º**  
    –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç:
    - –ö–∞–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É—é—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º—É
    - –ö–∞–∫–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è "—Å–ª–∏–≤–∞—é—Ç" –±—é–¥–∂–µ—Ç
    - –ö–∞–∫–∏–µ –ø–æ–¥—Ö–æ–¥—ã —Ç—Ä–µ–±—É—é—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    *–ü—Ä–∏–º–µ—Ä:* –ï—Å–ª–∏ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ —Å –∂–µ–Ω—â–∏–Ω–∞–º–∏ 55+ –∏–º–µ—é—Ç –Ω–∏–∑–∫–∏–π CTR ‚Äî —ç—Ç–æ —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ä–µ–∞—Ç–∏–≤—ã –¥–ª—è —ç—Ç–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
    """)

with tab2:
    # print(impact_df)
    # –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –≤ "–¥–ª–∏–Ω–Ω—ã–π" —Ñ–æ—Ä–º–∞—Ç –¥–ª—è plotly
    df_melted = impact_df.melt(id_vars='–ú–µ—Ç—Ä–∏–∫–∞', var_name='–ö–ª–∞—Å—Ç–µ—Ä', value_name='SHAP Impact')
    # –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    st.title('–í–∫–ª–∞–¥ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –≤ –º–µ—Ç—Ä–∏–∫–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏')
    st.write("SHAP Impact –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º")
    # –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞ (–Ω–∞–¥–æ –ª–∏?)
    chart_type = st.selectbox("Bar Chart (–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π)",
                             ["Bar Chart (–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π)", "Bar Chart (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)", "Line Chart"])
    if chart_type == "Bar Chart (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)":
        fig = px.bar(df_melted, x='–ú–µ—Ç—Ä–∏–∫–∞', y='SHAP Impact', color='–ö–ª–∞—Å—Ç–µ—Ä',
                     barmode='group', title='–í–∫–ª–∞–¥ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)')
    elif chart_type == "Bar Chart (–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π)":
        fig = px.bar(df_melted, y='–ú–µ—Ç—Ä–∏–∫–∞', x='SHAP Impact', color='–ö–ª–∞—Å—Ç–µ—Ä', barmode='stack', title='–í–∫–ª–∞–¥ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º (–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π)' )
    else:
        fig = px.line(df_melted, x='–ú–µ—Ç—Ä–∏–∫–∞', y='SHAP Impact', color='–ö–ª–∞—Å—Ç–µ—Ä', title='–í–∫–ª–∞–¥ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º (–ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫)')
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
    fig.update_layout(
        xaxis_title='–ú–µ—Ç—Ä–∏–∫–∞',
        yaxis_title='SHAP Impact',
        hovermode='x unified',
        xaxis={'categoryorder':'total descending'}
    )
    fig.update_xaxes(tickangle=45)
    st.plotly_chart(fig, use_container_width=True)
    # SHAP Impact table
    st.subheader("–¢–∞–±–ª–∏—Ü–∞ SHAP Impact")
    st.dataframe(impact_df, height=len(impact_df.columns) * 101)
    # –í—Ä–µ–¥–Ω—ã–µ —Å–æ–≤–µ—Ç—ã...


with tab3:
    st.header("–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    st.warning("–≠—Ç–∏ —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∏–∑–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ç—Ä–µ–±—É—é—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

    for cluster_id, segments in bad_segments.items():
        with st.expander(f"üî¥ –ö–ª–∞—Å—Ç–µ—Ä {cluster_id}", expanded=True):
            if segments == "–Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ":
                st.success("‚úÖ –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
            else:
                st.error("**–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:**")
                for segment in segments:
                    col1, col2 = st.columns([1, 3])
                    with col1:
                        st.metric("–°–µ–≥–º–µ–Ω—Ç", segment.split(":")[0])
                    with col2:
                        st.metric("–ü–∞—Ä–∞–º–µ—Ç—Ä", segment.split(":")[1] if ":" in segment else segment)

                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                st.info("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                st.markdown("""
                - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏
                """)

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∫–ª–∏–∫–µ
st.sidebar.markdown("---")
