import streamlit as st
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide", page_title="–†–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏", page_icon="üè£")
st.title("–ú–æ–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏")

# –°–ª–æ–≤–∞—Ä—å —Ç–∏–ø–æ–≤ –∫–∞–º–ø–∞–Ω–∏–π
company_types = {
    "TEXT_CAMPAIGN": "–¢–µ–∫—Å—Ç–æ–≤–æ-–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ",
    "UNIFIED_CAMPAIGN": "–ü–µ—Ä—Ñ–æ–º–∞–Ω—Å",
    "SMART_CAMPAIGN": "–°–º–∞—Ä—Ç-–±–∞–Ω–Ω–µ—Ä—ã"
}


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def get_data():
    try:
        response = requests.post(
            "http://127.0.0.1:8000/ads/companies",
            headers={
                "accept": "application/json",
                "Cookie": f"ads_analyzer={st.session_state["token"]}"
            }
        )
        return response.json()["result"]["Campaigns"] if response.status_code == 200 else None
    except Exception as e:
        return None


data = get_data()


# –§–∏–ª—å—Ç—Ä—ã –≤ —Å–∞–π–¥–±–∞—Ä–µ
with st.sidebar:
    st.subheader("–§–∏–ª—å—Ç—Ä—ã")

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–∞–º–ø–∞–Ω–∏–∏
    type_filter = st.multiselect(
        "–¢–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏",
        options=list(company_types.values()),
        default=list(company_types.values())
    )

    # –§–∏–ª—å—Ç—Ä –ø–æ –±—é–¥–∂–µ—Ç—É
    budget_filter = st.slider(
        "–î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å—Ö–æ–¥–æ–≤ (—Ä—É–±)",
        min_value=-10000000,
        max_value=10000000,
        value=(-10000000, 10000000),
        step=1000
    )

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
if not data:
    st.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
else:
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total = len(data)
    total_spend = sum(c.get("Funds", {}).get("SharedAccountFunds", {}).get("Spend", 0) / 1000000 for c in data)

    col1, col2 = st.columns(2)
    col1.metric("–í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π", total)
    col2.metric("–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã", f"{total_spend:,.2f} —Ä—É–±")

    st.divider()

    # –°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π
    for campaign in data:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        camp_type = company_types.get(campaign.get("Type"), "–î—Ä—É–≥–æ–π")
        spend = campaign.get("Funds", {}).get("SharedAccountFunds", {}).get("Spend", 0) / 1000000

        if camp_type not in type_filter:
            continue
        if not (budget_filter[0] <= spend <= budget_filter[1]):
            continue

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–º–ø–∞–Ω–∏–∏
        with st.expander(f"{campaign.get('Name')} (ID: {campaign.get('Id')})"):
            col1, col2 = st.columns(2)

            with col1:
                st.write(f"**–¢–∏–ø:** {camp_type}")
                st.write(f"**–°—Ç–∞—Ç—É—Å:** {campaign.get('Status', '‚Äî')}")

            with col2:
                st.write(f"**–†–∞—Å—Ö–æ–¥—ã:** {spend:,.2f} —Ä—É–±")
                daily = campaign.get("DailyBudget", {})
                if daily:
                    st.write(f"**–ë—é–¥–∂–µ—Ç:** {daily.get('Amount', 0) / 1000000:,.2f} —Ä—É–±/–¥–µ–Ω—å")

            # –î–µ—Ç–∞–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy = campaign.get("TextCampaign", {}).get("BiddingStrategy", {})
            if strategy:
                st.write("**–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å—Ç–∞–≤–æ–∫:**")
                st.json(strategy)  # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
            if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", key=campaign.get('Id')):
                response = requests.post(
                    url=f"http://127.0.0.1:8000/ads/report/create?company_id={campaign.get('Id')}",
                    headers={
                        "accept": "application/json",
                        "Cookie": f"ads_analyzer={st.session_state['token']}"
                    }
                )
                st.success(response.status_code)
