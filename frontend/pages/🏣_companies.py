import streamlit as st
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide", page_title="–†–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏", page_icon="üìä")
st.title("üìä –ú–æ–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏")

# –°—Ç–∏–ª–∏ CSS –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
st.markdown("""
    <style>
        .campaign-card {
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s;
            background-color: white;
        }
        .campaign-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }
        .metric-card {
            border-radius: 10px;
            padding: 1rem;
            background-color: #f8f9fa;
        }
        .header {
            color: #2c3e50;
        }
        .positive {
            color: #27ae60;
        }
        .negative {
            color: #e74c3c;
        }
        .stButton>button {
            border-radius: 8px;
            padding: 0.5rem 1rem;
        }
    </style>
""", unsafe_allow_html=True)

# –°–ª–æ–≤–∞—Ä—å —Ç–∏–ø–æ–≤ –∫–∞–º–ø–∞–Ω–∏–π —Å –∏–∫–æ–Ω–∫–∞–º–∏
company_types = {
    "TEXT_CAMPAIGN": ("üìù –¢–µ–∫—Å—Ç–æ–≤–æ-–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ", "#3498db"),
    "UNIFIED_CAMPAIGN": ("üöÄ –ü–µ—Ä—Ñ–æ–º–∞–Ω—Å", "#9b59b6"),
    "SMART_CAMPAIGN": ("üß† –°–º–∞—Ä—Ç-–±–∞–Ω–Ω–µ—Ä—ã", "#e67e22"),
    "DYNAMIC_CAMPAIGN": ("üîÑ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ", "#1abc9c"),
    "MOBILE_CAMPAIGN": ("üì± –ú–æ–±–∏–ª—å–Ω—ã–µ", "#2ecc71")
}


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(ttl=300)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
def get_data():
    print(st.session_state['token'])
    try:
        response = requests.post(
            "http://127.0.0.1:8000/ads/companies",
            headers={
                "accept": "application/json",
                "Cookie": f"ads_analyzer={st.session_state['token']}"
            },
            timeout=10
        )
        if response.status_code == 200:
            return response.json()["result"]["Campaigns"]
        st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        return None


data = get_data()

# –§–∏–ª—å—Ç—Ä—ã –≤ —Å–∞–π–¥–±–∞—Ä–µ
with st.sidebar:
    st.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")

    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", "")

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–∞–º–ø–∞–Ω–∏–∏
    type_filter = st.multiselect(
        "–¢–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏",
        options=[v[0] for v in company_types.values()],
        default=[v[0] for v in company_types.values()],
        key="type_filter"
    )

    # –§–∏–ª—å—Ç—Ä –ø–æ –±—é–¥–∂–µ—Ç—É
    st.write("**–§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º**")
    min_spend, max_spend = st.slider(
        "–î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å—Ö–æ–¥–æ–≤ (—Ä—É–±)",
        min_value=0,
        max_value=10000000,
        value=(0, 10000000),
        step=1000,
        format="%d —Ä—É–±",
        label_visibility="collapsed"
    )

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    sort_option = st.selectbox(
        "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
        options=["–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ê-–Ø)", "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ø-–ê)", "–ü–æ —Ä–∞—Å—Ö–æ–¥–∞–º (‚Üë)", "–ü–æ —Ä–∞—Å—Ö–æ–¥–∞–º (‚Üì)", "–ü–æ ID"],
        index=0
    )

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
if not data:
    st.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.")
else:
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total = len(data)
    total_spend = sum(c.get("Funds", {}).get("SharedAccountFunds", {}).get("Spend", 0) / 1000000 for c in data)
    avg_spend = total_spend / total if total > 0 else 0

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(f"""
            <div class="metric-card">
                <h3>–í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π</h3>
                <h2>{total}</h2>
            </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown(f"""
            <div class="metric-card">
                <h3>–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã</h3>
                <h2>{total_spend:,.2f} ‚ÇΩ</h2>
            </div>
        """, unsafe_allow_html=True)

    with col3:
        st.markdown(f"""
            <div class="metric-card">
                <h3>–°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã</h3>
                <h2>{avg_spend:,.2f} ‚ÇΩ</h2>
            </div>
        """, unsafe_allow_html=True)

    st.divider()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    processed_data = []
    for campaign in data:
        camp_type = campaign.get("Type")
        type_name, type_color = company_types.get(camp_type, (f"‚ùì {camp_type}", "#95a5a6"))
        spend = campaign.get("Funds", {}).get("SharedAccountFunds", {}).get("Spend", 0) / 1000000
        refund = campaign.get("Funds", {}).get("SharedAccountFunds", {}).get("Refund", 0) / 1000000
        net_spend = spend - refund

        processed_data.append({
            "id": campaign.get("Id"),
            "name": campaign.get("Name"),
            "type": type_name,
            "type_color": type_color,
            "spend": spend,
            "refund": refund,
            "net_spend": net_spend,
            "status": campaign.get("Status", "‚Äî"),
            "daily_budget": campaign.get("DailyBudget", {}).get("Amount", 0) / 1000000 if campaign.get(
                "DailyBudget") else 0,
            "strategy": campaign.get("TextCampaign", {}).get("BiddingStrategy", {}),
            "counter_ids": campaign.get("TextCampaign", {}).get("CounterIds", {}).get("Items", [])
        })

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_data = [
        c for c in processed_data
        if (search_query.lower() in c["name"].lower()) and
           (c["type"] in type_filter) and
           (min_spend <= c["spend"] <= max_spend)
    ]

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    if sort_option == "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ê-–Ø)":
        filtered_data.sort(key=lambda x: x["name"])
    elif sort_option == "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ø-–ê)":
        filtered_data.sort(key=lambda x: x["name"], reverse=True)
    elif sort_option == "–ü–æ —Ä–∞—Å—Ö–æ–¥–∞–º (‚Üë)":
        filtered_data.sort(key=lambda x: x["spend"])
    elif sort_option == "–ü–æ —Ä–∞—Å—Ö–æ–¥–∞–º (‚Üì)":
        filtered_data.sort(key=lambda x: x["spend"], reverse=True)
    elif sort_option == "–ü–æ ID":
        filtered_data.sort(key=lambda x: x["id"])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
    st.markdown(f"**–ù–∞–π–¥–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π:** {len(filtered_data)}")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–º–ø–∞–Ω–∏–π
    for campaign in filtered_data:
        with st.container():
            st.markdown(f"""
                <div class="campaign-card" style="border-left: 5px solid {campaign['type_color']}">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <h3 style="margin: 0; color: #2c3e50;">{campaign['name']}</h3>
                        <span style="background-color: {campaign['type_color']}; color: white; padding: 0.2rem 0.5rem; border-radius: 12px; font-size: 0.8rem;">
                            {campaign['type']}
                        </span>
                    </div>
                    <div style="margin-top: 0.5rem; color: #7f8c8d; font-size: 0.9rem;">ID: {campaign['id']} | –°—Ç–∞—Ç—É—Å: {campaign['status']}</div>
                </div>
            """, unsafe_allow_html=True)

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–ø–∞–Ω–∏–∏
            col1, col2, col3 = st.columns([2, 2, 1])

            with col1:
                st.markdown("**–§–∏–Ω–∞–Ω—Å—ã**")
                st.markdown(f"""
                    - –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: <span style="font-weight: bold;">{campaign['spend']:,.2f} ‚ÇΩ</span>
                    - –í–æ–∑–≤—Ä–∞—Ç—ã: <span class="negative">{campaign['refund']:,.2f} ‚ÇΩ</span>
                    - –ß–∏—Å—Ç—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: <span class="positive">{campaign['net_spend']:,.2f} ‚ÇΩ</span>
                """, unsafe_allow_html=True)

                if campaign['daily_budget'] > 0:
                    st.markdown(f"**–î–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç:** {campaign['daily_budget']:,.2f} ‚ÇΩ")

            with col2:
                st.markdown("**–°—á–µ—Ç—á–∏–∫–∏**")
                if campaign['counter_ids']:
                    for counter_id in campaign['counter_ids']:
                        st.markdown(f"- `{counter_id}`")
                else:
                    st.markdown("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤")

            with col3:
                if st.button("üìä –ê–Ω–∞–ª–∏–∑", key=f"analyze_{campaign['id']}"):
                    with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞..."):
                        try:
                            response = requests.post(
                                url=f"http://127.0.0.1:8000/ads/report/create?company_id={campaign['id']}",
                                headers={
                                    "accept": "application/json",
                                    "Cookie": f"ads_analyzer={st.session_state['token']}"
                                },
                                timeout=15
                            )
                            if response.status_code == 200:
                                st.success("–û—Ç—á–µ—Ç –ø–æ—Å—Ç—É–ø–∏–ª –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É")
                            else:
                                st.error(f"–û—à–∏–±–∫–∞: {response.status_code}")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")

            # –î–µ—Ç–∞–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (—Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–π—Å—è –±–ª–æ–∫)
            with st.expander("üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"):
                if campaign['strategy']:
                    st.json(campaign['strategy'])
                else:
                    st.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

            st.divider()
